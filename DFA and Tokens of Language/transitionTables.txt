#this is a comment
#
# use @def for regular definitions
# use @alpha for the alphabets. Each alphabet is separated by a spaces 
# use @final for final states
# use @start for start state, 
# only the start state name can be reused in the proceeding transition tables
# use @tt for begin defining the transition table.
#
#    * The number of values in the given line should be states*alphabets
#    * 
#    * Example: 3 states and 2 alphabets means exactly 3*2 = 6 values
#    * The first value will corresponds to first alphabet and first state
#    * The second value will corresponds to second alphabet and first state
#    * The third value will corresponds to first alphabet and second state
#    * so on ...
#
#
#

#def are common to all the transition tables
@def letter _ a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
@def digit 0 1 2 3 4 5 6 7 8 9

# start of another transition table for "parenthesis"
@final_state 1
@start_state parenthesis
@states parenthesis 1
@alpha { } ( )
@tt  1 1 1 1 1 1 1 1
#
# end of transition table


# start of another transition table for "logical"
@final_state 1 2 3 4 5 6
@start_state logical
@states logical 1 2 3 4 5 6 7
@alpha < = > ! | &
@tt 1 2 3 4 5 6 1 6 7 7 7 7 7 6 3 7 7 7 7 6 7 7 7 7 7 7 7 7 6 7 7 7 7 7 6 7 7 7 7 7 7 6 7 7 7 7 7 7
#
# end of transition table


# start of another transition table for "operators"
@final_state 1 2 3 4
@start_state operator
@states operator 1 2 3 4 5
@alpha + - * /
@tt 1 2 3 4 1 5 5 5 2 5 5 5 3 5 5 5 4 5 5 5 5 5 5 5
#
# end of transition table


# start of another transition table for "print"
@final_state 5
@start_state print
@states print 1 2 3 4 5
@alpha p r i n t
@tt 1 2 2 2 2 2 3 2 2 2 2 2 4 2 2 2 2 2 5 2 2 2 2 2 5 1 2 2 2 2
#
# end of transition table

# start of another transition table for "break"
@final_state 5
@start_state break
@states break 1 2 3 4 5
@alpha b r e a k
@tt 1 2 2 2 2 2 3 2 2 2 2 2 4 2 2 2 2 2 5 2 2 2 2 2 5 1 2 2 2 2
#
# end of transition table

#
# start of another transition table for words
@final_state 1 3
@start_state words
@states words 1 2 3
@alpha letter digit
@tt 1 2 1 3 2 2 2 3
#
# end of transition table


#
# start of another transition table for digits
@final_state 1 2
@start_state DIG
@states DIG 1 2 3
@alpha digit .
@tt 1 3 1 2 2 3 3 3
#
# end of transition table


# start of another transition table for "if"
@final_state 1
@start_state if
@states if 1 3
@alpha i f
@tt 1 3 3 1 3 3
#
# end of transition table

# start of another transition table for "while"
@final_state 5
@start_state while
@states while 1 2 3 4 5
@alpha w h i l e
@tt 1 2 2 2 2 2 3 2 2 2 2 2 4 2 2 2 2 2 5 2 2 2 2 2 5 1 2 2 2 2
#
# end of transition table